#!/usr/bin/env bash
set -ex

# Print compute node.
echo "$(date): Running on compute node $host"

. $LMOD_PKG/init/sh
ml purge
ml gentoo Blender OpenEXR

cat << END > ./frames_per_node.py
import bpy
import math

scene = bpy.context.scene
frames_per_node = int(math.ceil((scene.frame_end - scene.frame_start + 1)/float(${SLURM_JOB_NUM_NODES})))
print(f"frames_per_node={frames_per_node}")
END

cat << 'END' > ./start_frame.py
import bpy

print(f"start_frame={bpy.context.scene.frame_start}")
END

cat << 'END' > ./end_frame.py
import bpy

print(f"end_frame={bpy.context.scene.frame_end}")
END

frames_per_node=$(blender -b "<%= context.working_file %>" -P ./frames_per_node.py | sed -nr 's/frames_per_node=(.*)/\1/p')
start_frame=$(blender -b "<%= context.working_file %>" -P ./start_frame.py | sed -nr 's/start_frame=(.*)/\1/p')
end_frame=$(blender -b "<%= context.working_file %>" -P ./end_frame.py | sed -nr 's/end_frame=(.*)/\1/p')

if [[ "$frames_per_node" -lt "$SLURM_JOB_NUM_NODES" ]]; then
  echo "The job has stopeed to avoid overconsumption."
  echo "Please use $frames_per_node instead of ${SLURM_JOB_NUM_NODES} nodes."
  exit 1
fi

echo "$(date): Started blender"
echo ""

for node in $(seq 1 "${SLURM_JOB_NUM_NODES}"); do
start_frame_i=$(((node-1)*frames_per_node+start_frame))
end_frame_i=$((node*frames_per_node+start_frame-1))

if [[ node -eq ${SLURM_JOB_NUM_NODES} ]]; then
  end_frame_i=$end_frame
fi

<% if context.render_engine == "CYCLES" %>
<% if context.gpus_per_node.to_i > 0 %>
  srun -N 1 --gpus=<%= context.gpus_per_node.blank? ? 0 : context.gpus_per_node.to_i %> --ntasks 1 --export=ALL blender -E "<%= context.render_engine %>" -b "<%= context.working_file %>" -F "<%= context.output_types %>" -o "$(pwd)/out/frame_#####" -s "$start_frame_i" -e "$end_frame_i" -a -- --cycles-print-stats --cycles-device OPTIX &
<% else %>
  srun -N 1 --ntasks 1 --export=ALL blender -E "<%= context.render_engine %>" -b "<%= context.working_file %>" -F "<%= context.output_types %>" -o "$(pwd)/out/frame_#####" -s "$start_frame_i" -e "$end_frame_i" -a -- --cycles-print-stats --cycles-device CPU &
<% end %>

<% else %>
  srun -N 1 --ntasks 1 --export=ALL blender -E "<%= context.render_engine %>" -b "<%= context.working_file %>" -F "<%= context.output_types %>" -o "$(pwd)/out/frame_#####" -s "$start_frame_i" -e "$end_frame_i" -a &
<% end %>
done

wait
